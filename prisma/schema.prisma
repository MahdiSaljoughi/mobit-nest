generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}

enum OrderPayMentMethod {
  ONLINE
  FACETOFACE
}

model User {
  id             Int        @id @default(autoincrement())
  user_name      String?    @unique
  first_name     String?
  last_name      String?
  email          String?    @unique
  phone          String     @unique
  role           UserRole   @default(CUSTOMER)
  email_verified Boolean    @default(false)
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt
  products       Product[]
  orders         Order[]
  Category       Category[]
}

model Product {
  id               Int              @id @default(autoincrement())
  title            String
  title_eng        String
  slug             String           @unique
  description      String
  is_show          Boolean          @default(false)
  is_fast_delivery Boolean          @default(false)
  is_offer         Boolean          @default(false)
  is_fake          Boolean          @default(false)
  brand            String
  brand_eng        String
  created_by       Int
  category_id      Int
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  author           User             @relation(fields: [created_by], references: [id])
  category         Category         @relation(fields: [category_id], references: [id])
  images           ProductImage[]
  orders           ProductOrder[]
  variants         ProductVariant[]
}

model Order {
  id               Int                @id @unique @default(autoincrement())
  customer_id      Int
  total_price      Int
  payment_method   OrderPayMentMethod
  delivery_address String
  updated_at       DateTime           @updatedAt
  created_at       DateTime           @default(now())
  status           OrderStatus        @default(PENDING)
  customer         User               @relation(fields: [customer_id], references: [id])
  products         ProductOrder[]
}

model Category {
  id         Int       @id @default(autoincrement())
  created_by Int
  title      String
  title_eng  String
  url        String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  author     User      @relation(fields: [created_by], references: [id])
  products   Product[]
}

model Otp {
  id         Int      @id @default(autoincrement())
  phone      String
  code       String
  expires_at DateTime
  created_at DateTime @default(now())
}

model ProductVariant {
  id                   Int     @id @default(autoincrement())
  hex_code             String
  color_name           String
  quantity             Int
  price                Int
  discount             Float?
  price_after_discount Int?
  product_id           Int
  product              Product @relation(fields: [product_id], references: [id])
}

model ProductImage {
  id         Int     @id @default(autoincrement())
  url        String
  product_id Int
  product    Product @relation(fields: [product_id], references: [id])
}

model ProductOrder {
  id         Int      @id @unique @default(autoincrement())
  order_id   Int
  product_id Int
  price      Int
  quantity   Int
  color_name String
  hex_code   String
  image      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  order      Order    @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [product_id], references: [id])
}
